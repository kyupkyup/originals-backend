module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregateBulletinList {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateLikeOnComment {
  count: Int!
}

type AggregateMeeting {
  count: Int!
}

type AggregateParticipant {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateReservation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateView {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  title: String!
  author: String!
  publisher: String!
  content: String!
  createdAt: DateTime!
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation!]
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  files: FileCreateManyWithoutBookInput
  title: String!
  author: String!
  publisher: String!
  content: String!
  reservations: ReservationCreateManyWithoutBookInput
}

input BookCreateOneWithoutFilesInput {
  create: BookCreateWithoutFilesInput
  connect: BookWhereUniqueInput
}

input BookCreateOneWithoutReservationsInput {
  create: BookCreateWithoutReservationsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutFilesInput {
  id: ID
  title: String!
  author: String!
  publisher: String!
  content: String!
  reservations: ReservationCreateManyWithoutBookInput
}

input BookCreateWithoutReservationsInput {
  id: ID
  files: FileCreateManyWithoutBookInput
  title: String!
  author: String!
  publisher: String!
  content: String!
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  publisher_ASC
  publisher_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  author: String!
  publisher: String!
  content: String!
  createdAt: DateTime!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateInput {
  files: FileUpdateManyWithoutBookInput
  title: String
  author: String
  publisher: String
  content: String
  reservations: ReservationUpdateManyWithoutBookInput
}

input BookUpdateManyMutationInput {
  title: String
  author: String
  publisher: String
  content: String
}

input BookUpdateOneRequiredWithoutReservationsInput {
  create: BookCreateWithoutReservationsInput
  update: BookUpdateWithoutReservationsDataInput
  upsert: BookUpsertWithoutReservationsInput
  connect: BookWhereUniqueInput
}

input BookUpdateOneWithoutFilesInput {
  create: BookCreateWithoutFilesInput
  update: BookUpdateWithoutFilesDataInput
  upsert: BookUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: BookWhereUniqueInput
}

input BookUpdateWithoutFilesDataInput {
  title: String
  author: String
  publisher: String
  content: String
  reservations: ReservationUpdateManyWithoutBookInput
}

input BookUpdateWithoutReservationsDataInput {
  files: FileUpdateManyWithoutBookInput
  title: String
  author: String
  publisher: String
  content: String
}

input BookUpsertWithoutFilesInput {
  update: BookUpdateWithoutFilesDataInput!
  create: BookCreateWithoutFilesInput!
}

input BookUpsertWithoutReservationsInput {
  update: BookUpdateWithoutReservationsDataInput!
  create: BookCreateWithoutReservationsInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  publisher: String
  publisher_not: String
  publisher_in: [String!]
  publisher_not_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_gt: String
  publisher_gte: String
  publisher_contains: String
  publisher_not_contains: String
  publisher_starts_with: String
  publisher_not_starts_with: String
  publisher_ends_with: String
  publisher_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

type BulletinList {
  id: ID!
  classifyNum: Int!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type BulletinListConnection {
  pageInfo: PageInfo!
  edges: [BulletinListEdge]!
  aggregate: AggregateBulletinList!
}

input BulletinListCreateInput {
  id: ID
  classifyNum: Int!
  posts: PostCreateManyWithoutBulletinListInput
}

input BulletinListCreateOneWithoutPostsInput {
  create: BulletinListCreateWithoutPostsInput
  connect: BulletinListWhereUniqueInput
}

input BulletinListCreateWithoutPostsInput {
  id: ID
  classifyNum: Int!
}

type BulletinListEdge {
  node: BulletinList!
  cursor: String!
}

enum BulletinListOrderByInput {
  id_ASC
  id_DESC
  classifyNum_ASC
  classifyNum_DESC
}

type BulletinListPreviousValues {
  id: ID!
  classifyNum: Int!
}

type BulletinListSubscriptionPayload {
  mutation: MutationType!
  node: BulletinList
  updatedFields: [String!]
  previousValues: BulletinListPreviousValues
}

input BulletinListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BulletinListWhereInput
  AND: [BulletinListSubscriptionWhereInput!]
  OR: [BulletinListSubscriptionWhereInput!]
  NOT: [BulletinListSubscriptionWhereInput!]
}

input BulletinListUpdateInput {
  classifyNum: Int
  posts: PostUpdateManyWithoutBulletinListInput
}

input BulletinListUpdateManyMutationInput {
  classifyNum: Int
}

input BulletinListUpdateOneRequiredWithoutPostsInput {
  create: BulletinListCreateWithoutPostsInput
  update: BulletinListUpdateWithoutPostsDataInput
  upsert: BulletinListUpsertWithoutPostsInput
  connect: BulletinListWhereUniqueInput
}

input BulletinListUpdateWithoutPostsDataInput {
  classifyNum: Int
}

input BulletinListUpsertWithoutPostsInput {
  update: BulletinListUpdateWithoutPostsDataInput!
  create: BulletinListCreateWithoutPostsInput!
}

input BulletinListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  classifyNum: Int
  classifyNum_not: Int
  classifyNum_in: [Int!]
  classifyNum_not_in: [Int!]
  classifyNum_lt: Int
  classifyNum_lte: Int
  classifyNum_gt: Int
  classifyNum_gte: Int
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [BulletinListWhereInput!]
  OR: [BulletinListWhereInput!]
  NOT: [BulletinListWhereInput!]
}

input BulletinListWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  text: String!
  user: User
  post: Post!
  likes(where: LikeOnCommentWhereInput, orderBy: LikeOnCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeOnComment!]
  createdAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput!
  likes: LikeOnCommentCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutLikesInput {
  create: CommentCreateWithoutLikesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutLikesInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  likes: LikeOnCommentCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
  likes: LikeOnCommentCreateManyWithoutCommentInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  likes: LikeOnCommentUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutLikesInput {
  create: CommentCreateWithoutLikesInput
  update: CommentUpdateWithoutLikesDataInput
  upsert: CommentUpsertWithoutLikesInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutLikesDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  likes: LikeOnCommentUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
  likes: LikeOnCommentUpdateManyWithoutCommentInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutLikesInput {
  update: CommentUpdateWithoutLikesDataInput!
  create: CommentCreateWithoutLikesInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  post: PostWhereInput
  likes_every: LikeOnCommentWhereInput
  likes_some: LikeOnCommentWhereInput
  likes_none: LikeOnCommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  post: Post
  book: Book
  user: User
  createdAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  book: BookCreateOneWithoutFilesInput
  user: UserCreateOneWithoutFilesInput
}

input FileCreateManyWithoutBookInput {
  create: [FileCreateWithoutBookInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutUserInput {
  create: [FileCreateWithoutUserInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutBookInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  user: UserCreateOneWithoutFilesInput
}

input FileCreateWithoutPostInput {
  id: ID
  url: String!
  book: BookCreateOneWithoutFilesInput
  user: UserCreateOneWithoutFilesInput
}

input FileCreateWithoutUserInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput
  book: BookCreateOneWithoutFilesInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  book: BookUpdateOneWithoutFilesInput
  user: UserUpdateOneWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateManyWithoutBookInput {
  create: [FileCreateWithoutBookInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithoutUserInput {
  create: [FileCreateWithoutUserInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutBookDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  user: UserUpdateOneWithoutFilesInput
}

input FileUpdateWithoutPostDataInput {
  url: String
  book: BookUpdateOneWithoutFilesInput
  user: UserUpdateOneWithoutFilesInput
}

input FileUpdateWithoutUserDataInput {
  url: String
  post: PostUpdateOneWithoutFilesInput
  book: BookUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutBookInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutBookDataInput!
}

input FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutPostDataInput!
}

input FileUpdateWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutUserDataInput!
}

input FileUpsertWithWhereUniqueWithoutBookInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutBookDataInput!
  create: FileCreateWithoutBookInput!
}

input FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutPostDataInput!
  create: FileCreateWithoutPostInput!
}

input FileUpsertWithWhereUniqueWithoutUserInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutUserDataInput!
  create: FileCreateWithoutUserInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  post: PostWhereInput
  book: BookWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  user: User
  post: Post!
  createdAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
  post: PostCreateOneWithoutLikesInput!
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutLikesInput!
}

type LikeEdge {
  node: Like!
  cursor: String!
}

type LikeOnComment {
  id: ID!
  user: User
  comment: Comment!
  createdAt: DateTime!
}

type LikeOnCommentConnection {
  pageInfo: PageInfo!
  edges: [LikeOnCommentEdge]!
  aggregate: AggregateLikeOnComment!
}

input LikeOnCommentCreateInput {
  id: ID
  user: UserCreateOneInput
  comment: CommentCreateOneWithoutLikesInput!
}

input LikeOnCommentCreateManyWithoutCommentInput {
  create: [LikeOnCommentCreateWithoutCommentInput!]
  connect: [LikeOnCommentWhereUniqueInput!]
}

input LikeOnCommentCreateWithoutCommentInput {
  id: ID
  user: UserCreateOneInput
}

type LikeOnCommentEdge {
  node: LikeOnComment!
  cursor: String!
}

enum LikeOnCommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikeOnCommentPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input LikeOnCommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeOnCommentScalarWhereInput!]
  OR: [LikeOnCommentScalarWhereInput!]
  NOT: [LikeOnCommentScalarWhereInput!]
}

type LikeOnCommentSubscriptionPayload {
  mutation: MutationType!
  node: LikeOnComment
  updatedFields: [String!]
  previousValues: LikeOnCommentPreviousValues
}

input LikeOnCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeOnCommentWhereInput
  AND: [LikeOnCommentSubscriptionWhereInput!]
  OR: [LikeOnCommentSubscriptionWhereInput!]
  NOT: [LikeOnCommentSubscriptionWhereInput!]
}

input LikeOnCommentUpdateInput {
  user: UserUpdateOneInput
  comment: CommentUpdateOneRequiredWithoutLikesInput
}

input LikeOnCommentUpdateManyWithoutCommentInput {
  create: [LikeOnCommentCreateWithoutCommentInput!]
  delete: [LikeOnCommentWhereUniqueInput!]
  connect: [LikeOnCommentWhereUniqueInput!]
  set: [LikeOnCommentWhereUniqueInput!]
  disconnect: [LikeOnCommentWhereUniqueInput!]
  update: [LikeOnCommentUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [LikeOnCommentUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [LikeOnCommentScalarWhereInput!]
}

input LikeOnCommentUpdateWithoutCommentDataInput {
  user: UserUpdateOneInput
}

input LikeOnCommentUpdateWithWhereUniqueWithoutCommentInput {
  where: LikeOnCommentWhereUniqueInput!
  data: LikeOnCommentUpdateWithoutCommentDataInput!
}

input LikeOnCommentUpsertWithWhereUniqueWithoutCommentInput {
  where: LikeOnCommentWhereUniqueInput!
  update: LikeOnCommentUpdateWithoutCommentDataInput!
  create: LikeOnCommentCreateWithoutCommentInput!
}

input LikeOnCommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeOnCommentWhereInput!]
  OR: [LikeOnCommentWhereInput!]
  NOT: [LikeOnCommentWhereInput!]
}

input LikeOnCommentWhereUniqueInput {
  id: ID
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneWithoutLikesInput
  post: PostUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  post: PostUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Meeting {
  id: ID!
  title: String!
  main: Boolean!
  user: User
  meetingTime: String!
  meetingPlace: String!
  meetingPrice: String!
  deadline: String!
  meetingHeadCounts: Int!
  coords: String
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant!]
  createdAt: DateTime!
}

type MeetingConnection {
  pageInfo: PageInfo!
  edges: [MeetingEdge]!
  aggregate: AggregateMeeting!
}

input MeetingCreateInput {
  id: ID
  title: String!
  main: Boolean!
  user: UserCreateOneWithoutMeetingsInput
  meetingTime: String!
  meetingPlace: String!
  meetingPrice: String!
  deadline: String!
  meetingHeadCounts: Int!
  coords: String
  participants: ParticipantCreateManyWithoutMeetingInput
}

input MeetingCreateManyWithoutUserInput {
  create: [MeetingCreateWithoutUserInput!]
  connect: [MeetingWhereUniqueInput!]
}

input MeetingCreateOneWithoutParticipantsInput {
  create: MeetingCreateWithoutParticipantsInput
  connect: MeetingWhereUniqueInput
}

input MeetingCreateWithoutParticipantsInput {
  id: ID
  title: String!
  main: Boolean!
  user: UserCreateOneWithoutMeetingsInput
  meetingTime: String!
  meetingPlace: String!
  meetingPrice: String!
  deadline: String!
  meetingHeadCounts: Int!
  coords: String
}

input MeetingCreateWithoutUserInput {
  id: ID
  title: String!
  main: Boolean!
  meetingTime: String!
  meetingPlace: String!
  meetingPrice: String!
  deadline: String!
  meetingHeadCounts: Int!
  coords: String
  participants: ParticipantCreateManyWithoutMeetingInput
}

type MeetingEdge {
  node: Meeting!
  cursor: String!
}

enum MeetingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  main_ASC
  main_DESC
  meetingTime_ASC
  meetingTime_DESC
  meetingPlace_ASC
  meetingPlace_DESC
  meetingPrice_ASC
  meetingPrice_DESC
  deadline_ASC
  deadline_DESC
  meetingHeadCounts_ASC
  meetingHeadCounts_DESC
  coords_ASC
  coords_DESC
  createdAt_ASC
  createdAt_DESC
}

type MeetingPreviousValues {
  id: ID!
  title: String!
  main: Boolean!
  meetingTime: String!
  meetingPlace: String!
  meetingPrice: String!
  deadline: String!
  meetingHeadCounts: Int!
  coords: String
  createdAt: DateTime!
}

input MeetingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  main: Boolean
  main_not: Boolean
  meetingTime: String
  meetingTime_not: String
  meetingTime_in: [String!]
  meetingTime_not_in: [String!]
  meetingTime_lt: String
  meetingTime_lte: String
  meetingTime_gt: String
  meetingTime_gte: String
  meetingTime_contains: String
  meetingTime_not_contains: String
  meetingTime_starts_with: String
  meetingTime_not_starts_with: String
  meetingTime_ends_with: String
  meetingTime_not_ends_with: String
  meetingPlace: String
  meetingPlace_not: String
  meetingPlace_in: [String!]
  meetingPlace_not_in: [String!]
  meetingPlace_lt: String
  meetingPlace_lte: String
  meetingPlace_gt: String
  meetingPlace_gte: String
  meetingPlace_contains: String
  meetingPlace_not_contains: String
  meetingPlace_starts_with: String
  meetingPlace_not_starts_with: String
  meetingPlace_ends_with: String
  meetingPlace_not_ends_with: String
  meetingPrice: String
  meetingPrice_not: String
  meetingPrice_in: [String!]
  meetingPrice_not_in: [String!]
  meetingPrice_lt: String
  meetingPrice_lte: String
  meetingPrice_gt: String
  meetingPrice_gte: String
  meetingPrice_contains: String
  meetingPrice_not_contains: String
  meetingPrice_starts_with: String
  meetingPrice_not_starts_with: String
  meetingPrice_ends_with: String
  meetingPrice_not_ends_with: String
  deadline: String
  deadline_not: String
  deadline_in: [String!]
  deadline_not_in: [String!]
  deadline_lt: String
  deadline_lte: String
  deadline_gt: String
  deadline_gte: String
  deadline_contains: String
  deadline_not_contains: String
  deadline_starts_with: String
  deadline_not_starts_with: String
  deadline_ends_with: String
  deadline_not_ends_with: String
  meetingHeadCounts: Int
  meetingHeadCounts_not: Int
  meetingHeadCounts_in: [Int!]
  meetingHeadCounts_not_in: [Int!]
  meetingHeadCounts_lt: Int
  meetingHeadCounts_lte: Int
  meetingHeadCounts_gt: Int
  meetingHeadCounts_gte: Int
  coords: String
  coords_not: String
  coords_in: [String!]
  coords_not_in: [String!]
  coords_lt: String
  coords_lte: String
  coords_gt: String
  coords_gte: String
  coords_contains: String
  coords_not_contains: String
  coords_starts_with: String
  coords_not_starts_with: String
  coords_ends_with: String
  coords_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MeetingScalarWhereInput!]
  OR: [MeetingScalarWhereInput!]
  NOT: [MeetingScalarWhereInput!]
}

type MeetingSubscriptionPayload {
  mutation: MutationType!
  node: Meeting
  updatedFields: [String!]
  previousValues: MeetingPreviousValues
}

input MeetingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MeetingWhereInput
  AND: [MeetingSubscriptionWhereInput!]
  OR: [MeetingSubscriptionWhereInput!]
  NOT: [MeetingSubscriptionWhereInput!]
}

input MeetingUpdateInput {
  title: String
  main: Boolean
  user: UserUpdateOneWithoutMeetingsInput
  meetingTime: String
  meetingPlace: String
  meetingPrice: String
  deadline: String
  meetingHeadCounts: Int
  coords: String
  participants: ParticipantUpdateManyWithoutMeetingInput
}

input MeetingUpdateManyDataInput {
  title: String
  main: Boolean
  meetingTime: String
  meetingPlace: String
  meetingPrice: String
  deadline: String
  meetingHeadCounts: Int
  coords: String
}

input MeetingUpdateManyMutationInput {
  title: String
  main: Boolean
  meetingTime: String
  meetingPlace: String
  meetingPrice: String
  deadline: String
  meetingHeadCounts: Int
  coords: String
}

input MeetingUpdateManyWithoutUserInput {
  create: [MeetingCreateWithoutUserInput!]
  delete: [MeetingWhereUniqueInput!]
  connect: [MeetingWhereUniqueInput!]
  set: [MeetingWhereUniqueInput!]
  disconnect: [MeetingWhereUniqueInput!]
  update: [MeetingUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MeetingUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MeetingScalarWhereInput!]
  updateMany: [MeetingUpdateManyWithWhereNestedInput!]
}

input MeetingUpdateManyWithWhereNestedInput {
  where: MeetingScalarWhereInput!
  data: MeetingUpdateManyDataInput!
}

input MeetingUpdateOneRequiredWithoutParticipantsInput {
  create: MeetingCreateWithoutParticipantsInput
  update: MeetingUpdateWithoutParticipantsDataInput
  upsert: MeetingUpsertWithoutParticipantsInput
  connect: MeetingWhereUniqueInput
}

input MeetingUpdateWithoutParticipantsDataInput {
  title: String
  main: Boolean
  user: UserUpdateOneWithoutMeetingsInput
  meetingTime: String
  meetingPlace: String
  meetingPrice: String
  deadline: String
  meetingHeadCounts: Int
  coords: String
}

input MeetingUpdateWithoutUserDataInput {
  title: String
  main: Boolean
  meetingTime: String
  meetingPlace: String
  meetingPrice: String
  deadline: String
  meetingHeadCounts: Int
  coords: String
  participants: ParticipantUpdateManyWithoutMeetingInput
}

input MeetingUpdateWithWhereUniqueWithoutUserInput {
  where: MeetingWhereUniqueInput!
  data: MeetingUpdateWithoutUserDataInput!
}

input MeetingUpsertWithoutParticipantsInput {
  update: MeetingUpdateWithoutParticipantsDataInput!
  create: MeetingCreateWithoutParticipantsInput!
}

input MeetingUpsertWithWhereUniqueWithoutUserInput {
  where: MeetingWhereUniqueInput!
  update: MeetingUpdateWithoutUserDataInput!
  create: MeetingCreateWithoutUserInput!
}

input MeetingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  main: Boolean
  main_not: Boolean
  user: UserWhereInput
  meetingTime: String
  meetingTime_not: String
  meetingTime_in: [String!]
  meetingTime_not_in: [String!]
  meetingTime_lt: String
  meetingTime_lte: String
  meetingTime_gt: String
  meetingTime_gte: String
  meetingTime_contains: String
  meetingTime_not_contains: String
  meetingTime_starts_with: String
  meetingTime_not_starts_with: String
  meetingTime_ends_with: String
  meetingTime_not_ends_with: String
  meetingPlace: String
  meetingPlace_not: String
  meetingPlace_in: [String!]
  meetingPlace_not_in: [String!]
  meetingPlace_lt: String
  meetingPlace_lte: String
  meetingPlace_gt: String
  meetingPlace_gte: String
  meetingPlace_contains: String
  meetingPlace_not_contains: String
  meetingPlace_starts_with: String
  meetingPlace_not_starts_with: String
  meetingPlace_ends_with: String
  meetingPlace_not_ends_with: String
  meetingPrice: String
  meetingPrice_not: String
  meetingPrice_in: [String!]
  meetingPrice_not_in: [String!]
  meetingPrice_lt: String
  meetingPrice_lte: String
  meetingPrice_gt: String
  meetingPrice_gte: String
  meetingPrice_contains: String
  meetingPrice_not_contains: String
  meetingPrice_starts_with: String
  meetingPrice_not_starts_with: String
  meetingPrice_ends_with: String
  meetingPrice_not_ends_with: String
  deadline: String
  deadline_not: String
  deadline_in: [String!]
  deadline_not_in: [String!]
  deadline_lt: String
  deadline_lte: String
  deadline_gt: String
  deadline_gte: String
  deadline_contains: String
  deadline_not_contains: String
  deadline_starts_with: String
  deadline_not_starts_with: String
  deadline_ends_with: String
  deadline_not_ends_with: String
  meetingHeadCounts: Int
  meetingHeadCounts_not: Int
  meetingHeadCounts_in: [Int!]
  meetingHeadCounts_not_in: [Int!]
  meetingHeadCounts_lt: Int
  meetingHeadCounts_lte: Int
  meetingHeadCounts_gt: Int
  meetingHeadCounts_gte: Int
  coords: String
  coords_not: String
  coords_in: [String!]
  coords_not_in: [String!]
  coords_lt: String
  coords_lte: String
  coords_gt: String
  coords_gte: String
  coords_contains: String
  coords_not_contains: String
  coords_starts_with: String
  coords_not_starts_with: String
  coords_ends_with: String
  coords_not_ends_with: String
  participants_every: ParticipantWhereInput
  participants_some: ParticipantWhereInput
  participants_none: ParticipantWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MeetingWhereInput!]
  OR: [MeetingWhereInput!]
  NOT: [MeetingWhereInput!]
}

input MeetingWhereUniqueInput {
  id: ID
}

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createBulletinList(data: BulletinListCreateInput!): BulletinList!
  updateBulletinList(data: BulletinListUpdateInput!, where: BulletinListWhereUniqueInput!): BulletinList
  updateManyBulletinLists(data: BulletinListUpdateManyMutationInput!, where: BulletinListWhereInput): BatchPayload!
  upsertBulletinList(where: BulletinListWhereUniqueInput!, create: BulletinListCreateInput!, update: BulletinListUpdateInput!): BulletinList!
  deleteBulletinList(where: BulletinListWhereUniqueInput!): BulletinList
  deleteManyBulletinLists(where: BulletinListWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createLikeOnComment(data: LikeOnCommentCreateInput!): LikeOnComment!
  updateLikeOnComment(data: LikeOnCommentUpdateInput!, where: LikeOnCommentWhereUniqueInput!): LikeOnComment
  upsertLikeOnComment(where: LikeOnCommentWhereUniqueInput!, create: LikeOnCommentCreateInput!, update: LikeOnCommentUpdateInput!): LikeOnComment!
  deleteLikeOnComment(where: LikeOnCommentWhereUniqueInput!): LikeOnComment
  deleteManyLikeOnComments(where: LikeOnCommentWhereInput): BatchPayload!
  createMeeting(data: MeetingCreateInput!): Meeting!
  updateMeeting(data: MeetingUpdateInput!, where: MeetingWhereUniqueInput!): Meeting
  updateManyMeetings(data: MeetingUpdateManyMutationInput!, where: MeetingWhereInput): BatchPayload!
  upsertMeeting(where: MeetingWhereUniqueInput!, create: MeetingCreateInput!, update: MeetingUpdateInput!): Meeting!
  deleteMeeting(where: MeetingWhereUniqueInput!): Meeting
  deleteManyMeetings(where: MeetingWhereInput): BatchPayload!
  createParticipant(data: ParticipantCreateInput!): Participant!
  updateParticipant(data: ParticipantUpdateInput!, where: ParticipantWhereUniqueInput!): Participant
  upsertParticipant(where: ParticipantWhereUniqueInput!, create: ParticipantCreateInput!, update: ParticipantUpdateInput!): Participant!
  deleteParticipant(where: ParticipantWhereUniqueInput!): Participant
  deleteManyParticipants(where: ParticipantWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createReservation(data: ReservationCreateInput!): Reservation!
  updateReservation(data: ReservationUpdateInput!, where: ReservationWhereUniqueInput!): Reservation
  updateManyReservations(data: ReservationUpdateManyMutationInput!, where: ReservationWhereInput): BatchPayload!
  upsertReservation(where: ReservationWhereUniqueInput!, create: ReservationCreateInput!, update: ReservationUpdateInput!): Reservation!
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createView(data: ViewCreateInput!): View!
  updateView(data: ViewUpdateInput!, where: ViewWhereUniqueInput!): View
  upsertView(where: ViewWhereUniqueInput!, create: ViewCreateInput!, update: ViewUpdateInput!): View!
  deleteView(where: ViewWhereUniqueInput!): View
  deleteManyViews(where: ViewWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Participant {
  id: ID!
  user: User
  meeting: Meeting!
  createdAt: DateTime!
}

type ParticipantConnection {
  pageInfo: PageInfo!
  edges: [ParticipantEdge]!
  aggregate: AggregateParticipant!
}

input ParticipantCreateInput {
  id: ID
  user: UserCreateOneWithoutParticipantsInput
  meeting: MeetingCreateOneWithoutParticipantsInput!
}

input ParticipantCreateManyWithoutMeetingInput {
  create: [ParticipantCreateWithoutMeetingInput!]
  connect: [ParticipantWhereUniqueInput!]
}

input ParticipantCreateManyWithoutUserInput {
  create: [ParticipantCreateWithoutUserInput!]
  connect: [ParticipantWhereUniqueInput!]
}

input ParticipantCreateWithoutMeetingInput {
  id: ID
  user: UserCreateOneWithoutParticipantsInput
}

input ParticipantCreateWithoutUserInput {
  id: ID
  meeting: MeetingCreateOneWithoutParticipantsInput!
}

type ParticipantEdge {
  node: Participant!
  cursor: String!
}

enum ParticipantOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParticipantPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input ParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ParticipantScalarWhereInput!]
  OR: [ParticipantScalarWhereInput!]
  NOT: [ParticipantScalarWhereInput!]
}

type ParticipantSubscriptionPayload {
  mutation: MutationType!
  node: Participant
  updatedFields: [String!]
  previousValues: ParticipantPreviousValues
}

input ParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParticipantWhereInput
  AND: [ParticipantSubscriptionWhereInput!]
  OR: [ParticipantSubscriptionWhereInput!]
  NOT: [ParticipantSubscriptionWhereInput!]
}

input ParticipantUpdateInput {
  user: UserUpdateOneWithoutParticipantsInput
  meeting: MeetingUpdateOneRequiredWithoutParticipantsInput
}

input ParticipantUpdateManyWithoutMeetingInput {
  create: [ParticipantCreateWithoutMeetingInput!]
  delete: [ParticipantWhereUniqueInput!]
  connect: [ParticipantWhereUniqueInput!]
  set: [ParticipantWhereUniqueInput!]
  disconnect: [ParticipantWhereUniqueInput!]
  update: [ParticipantUpdateWithWhereUniqueWithoutMeetingInput!]
  upsert: [ParticipantUpsertWithWhereUniqueWithoutMeetingInput!]
  deleteMany: [ParticipantScalarWhereInput!]
}

input ParticipantUpdateManyWithoutUserInput {
  create: [ParticipantCreateWithoutUserInput!]
  delete: [ParticipantWhereUniqueInput!]
  connect: [ParticipantWhereUniqueInput!]
  set: [ParticipantWhereUniqueInput!]
  disconnect: [ParticipantWhereUniqueInput!]
  update: [ParticipantUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ParticipantUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ParticipantScalarWhereInput!]
}

input ParticipantUpdateWithoutMeetingDataInput {
  user: UserUpdateOneWithoutParticipantsInput
}

input ParticipantUpdateWithoutUserDataInput {
  meeting: MeetingUpdateOneRequiredWithoutParticipantsInput
}

input ParticipantUpdateWithWhereUniqueWithoutMeetingInput {
  where: ParticipantWhereUniqueInput!
  data: ParticipantUpdateWithoutMeetingDataInput!
}

input ParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput!
  data: ParticipantUpdateWithoutUserDataInput!
}

input ParticipantUpsertWithWhereUniqueWithoutMeetingInput {
  where: ParticipantWhereUniqueInput!
  update: ParticipantUpdateWithoutMeetingDataInput!
  create: ParticipantCreateWithoutMeetingInput!
}

input ParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput!
  update: ParticipantUpdateWithoutUserDataInput!
  create: ParticipantCreateWithoutUserInput!
}

input ParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  meeting: MeetingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
}

input ParticipantWhereUniqueInput {
  id: ID
}

type Post {
  id: ID!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  author: User
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views(where: ViewWhereInput, orderBy: ViewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [View!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  bulletinList: BulletinList!
  createdAt: DateTime!
  updatedAt: DateTime
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutBulletinListInput {
  create: [PostCreateWithoutBulletinListInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutViewsInput {
  create: PostCreateWithoutViewsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

input PostCreateWithoutBulletinListInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

input PostCreateWithoutFilesInput {
  id: ID
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

input PostCreateWithoutLikesInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  views: ViewCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

input PostCreateWithoutViewsInput {
  id: ID
  files: FileCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  bulletinList: BulletinListCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  classifyNum_ASC
  classifyNum_DESC
  main_ASC
  main_DESC
  announcement_ASC
  announcement_DESC
  title_ASC
  title_DESC
  caption_ASC
  caption_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  classifyNum: Int!
  main: Boolean!
  announcement: Boolean!
  title: String!
  caption: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  classifyNum: Int
  classifyNum_not: Int
  classifyNum_in: [Int!]
  classifyNum_not_in: [Int!]
  classifyNum_lt: Int
  classifyNum_lte: Int
  classifyNum_gt: Int
  classifyNum_gte: Int
  main: Boolean
  main_not: Boolean
  announcement: Boolean
  announcement_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  files: FileUpdateManyWithoutPostInput
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
}

input PostUpdateManyMutationInput {
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutBulletinListInput {
  create: [PostCreateWithoutBulletinListInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutBulletinListInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutBulletinListInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutViewsInput {
  create: PostCreateWithoutViewsInput
  update: PostUpdateWithoutViewsDataInput
  upsert: PostUpsertWithoutViewsInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  update: PostUpdateWithoutFilesDataInput
  upsert: PostUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  files: FileUpdateManyWithoutPostInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutBulletinListDataInput {
  files: FileUpdateManyWithoutPostInput
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  files: FileUpdateManyWithoutPostInput
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutFilesDataInput {
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutLikesDataInput {
  files: FileUpdateManyWithoutPostInput
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  views: ViewUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutViewsDataInput {
  files: FileUpdateManyWithoutPostInput
  author: UserUpdateOneWithoutPostsInput
  classifyNum: Int
  main: Boolean
  announcement: Boolean
  title: String
  caption: String
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  bulletinList: BulletinListUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithWhereUniqueWithoutBulletinListInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutBulletinListDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput!
  create: PostCreateWithoutFilesInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithoutViewsInput {
  update: PostUpdateWithoutViewsDataInput!
  create: PostCreateWithoutViewsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithWhereUniqueWithoutBulletinListInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutBulletinListDataInput!
  create: PostCreateWithoutBulletinListInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  author: UserWhereInput
  classifyNum: Int
  classifyNum_not: Int
  classifyNum_in: [Int!]
  classifyNum_not_in: [Int!]
  classifyNum_lt: Int
  classifyNum_lte: Int
  classifyNum_gt: Int
  classifyNum_gte: Int
  main: Boolean
  main_not: Boolean
  announcement: Boolean
  announcement_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  views_every: ViewWhereInput
  views_some: ViewWhereInput
  views_none: ViewWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  bulletinList: BulletinListWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  bulletinList(where: BulletinListWhereUniqueInput!): BulletinList
  bulletinLists(where: BulletinListWhereInput, orderBy: BulletinListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BulletinList]!
  bulletinListsConnection(where: BulletinListWhereInput, orderBy: BulletinListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BulletinListConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  likeOnComment(where: LikeOnCommentWhereUniqueInput!): LikeOnComment
  likeOnComments(where: LikeOnCommentWhereInput, orderBy: LikeOnCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeOnComment]!
  likeOnCommentsConnection(where: LikeOnCommentWhereInput, orderBy: LikeOnCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeOnCommentConnection!
  meeting(where: MeetingWhereUniqueInput!): Meeting
  meetings(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meeting]!
  meetingsConnection(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeetingConnection!
  participant(where: ParticipantWhereUniqueInput!): Participant
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant]!
  participantsConnection(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParticipantConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation]!
  reservationsConnection(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  view(where: ViewWhereUniqueInput!): View
  views(where: ViewWhereInput, orderBy: ViewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [View]!
  viewsConnection(where: ViewWhereInput, orderBy: ViewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewConnection!
  node(id: ID!): Node
}

type Reservation {
  id: ID!
  user: User
  book: Book!
  startDate: String!
  endDate: String!
  createdAt: DateTime!
}

type ReservationConnection {
  pageInfo: PageInfo!
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  id: ID
  user: UserCreateOneWithoutReservationsInput
  book: BookCreateOneWithoutReservationsInput!
  startDate: String!
  endDate: String!
}

input ReservationCreateManyWithoutBookInput {
  create: [ReservationCreateWithoutBookInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateManyWithoutUserInput {
  create: [ReservationCreateWithoutUserInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateWithoutBookInput {
  id: ID
  user: UserCreateOneWithoutReservationsInput
  startDate: String!
  endDate: String!
}

input ReservationCreateWithoutUserInput {
  id: ID
  book: BookCreateOneWithoutReservationsInput!
  startDate: String!
  endDate: String!
}

type ReservationEdge {
  node: Reservation!
  cursor: String!
}

enum ReservationOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReservationPreviousValues {
  id: ID!
  startDate: String!
  endDate: String!
  createdAt: DateTime!
}

input ReservationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReservationScalarWhereInput!]
  OR: [ReservationScalarWhereInput!]
  NOT: [ReservationScalarWhereInput!]
}

type ReservationSubscriptionPayload {
  mutation: MutationType!
  node: Reservation
  updatedFields: [String!]
  previousValues: ReservationPreviousValues
}

input ReservationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationWhereInput
  AND: [ReservationSubscriptionWhereInput!]
  OR: [ReservationSubscriptionWhereInput!]
  NOT: [ReservationSubscriptionWhereInput!]
}

input ReservationUpdateInput {
  user: UserUpdateOneWithoutReservationsInput
  book: BookUpdateOneRequiredWithoutReservationsInput
  startDate: String
  endDate: String
}

input ReservationUpdateManyDataInput {
  startDate: String
  endDate: String
}

input ReservationUpdateManyMutationInput {
  startDate: String
  endDate: String
}

input ReservationUpdateManyWithoutBookInput {
  create: [ReservationCreateWithoutBookInput!]
  delete: [ReservationWhereUniqueInput!]
  connect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [ReservationScalarWhereInput!]
  updateMany: [ReservationUpdateManyWithWhereNestedInput!]
}

input ReservationUpdateManyWithoutUserInput {
  create: [ReservationCreateWithoutUserInput!]
  delete: [ReservationWhereUniqueInput!]
  connect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ReservationScalarWhereInput!]
  updateMany: [ReservationUpdateManyWithWhereNestedInput!]
}

input ReservationUpdateManyWithWhereNestedInput {
  where: ReservationScalarWhereInput!
  data: ReservationUpdateManyDataInput!
}

input ReservationUpdateWithoutBookDataInput {
  user: UserUpdateOneWithoutReservationsInput
  startDate: String
  endDate: String
}

input ReservationUpdateWithoutUserDataInput {
  book: BookUpdateOneRequiredWithoutReservationsInput
  startDate: String
  endDate: String
}

input ReservationUpdateWithWhereUniqueWithoutBookInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutBookDataInput!
}

input ReservationUpdateWithWhereUniqueWithoutUserInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutUserDataInput!
}

input ReservationUpsertWithWhereUniqueWithoutBookInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutBookDataInput!
  create: ReservationCreateWithoutBookInput!
}

input ReservationUpsertWithWhereUniqueWithoutUserInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutUserDataInput!
  create: ReservationCreateWithoutUserInput!
}

input ReservationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  book: BookWhereInput
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
}

input ReservationWhereUniqueInput {
  id: ID
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  bulletinList(where: BulletinListSubscriptionWhereInput): BulletinListSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  likeOnComment(where: LikeOnCommentSubscriptionWhereInput): LikeOnCommentSubscriptionPayload
  meeting(where: MeetingSubscriptionWhereInput): MeetingSubscriptionPayload
  participant(where: ParticipantSubscriptionWhereInput): ParticipantSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  reservation(where: ReservationSubscriptionWhereInput): ReservationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  view(where: ViewSubscriptionWhereInput): ViewSubscriptionPayload
}

type User {
  id: ID!
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings(where: MeetingWhereInput, orderBy: MeetingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meeting!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMeetingsInput {
  create: UserCreateWithoutMeetingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutParticipantsInput {
  create: UserCreateWithoutParticipantsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReservationsInput {
  create: UserCreateWithoutReservationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutFilesInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
}

input UserCreateWithoutLikesInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutMeetingsInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutParticipantsInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  reservations: ReservationCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

input UserCreateWithoutReservationsInput {
  id: ID
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  meetings: MeetingCreateManyWithoutUserInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  participants: ParticipantCreateManyWithoutUserInput
  files: FileCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  avatar_ASC
  avatar_DESC
  userName_ASC
  userName_DESC
  birthday_ASC
  birthday_DESC
  phoneNum_ASC
  phoneNum_DESC
  email_ASC
  email_DESC
  introduce_ASC
  introduce_DESC
  password_ASC
  password_DESC
  classes_ASC
  classes_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String!
  introduce: String
  password: String
  classes: Int!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutMeetingsInput {
  create: UserCreateWithoutMeetingsInput
  update: UserUpdateWithoutMeetingsDataInput
  upsert: UserUpsertWithoutMeetingsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutParticipantsInput {
  create: UserCreateWithoutParticipantsInput
  update: UserUpdateWithoutParticipantsDataInput
  upsert: UserUpsertWithoutParticipantsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReservationsInput {
  create: UserCreateWithoutReservationsInput
  update: UserUpdateWithoutReservationsDataInput
  upsert: UserUpsertWithoutReservationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutFilesDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutMeetingsDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutParticipantsDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  reservations: ReservationUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpdateWithoutReservationsDataInput {
  avatar: String
  userName: String
  birthday: String
  phoneNum: String
  email: String
  introduce: String
  password: String
  classes: Int
  meetings: MeetingUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  participants: ParticipantUpdateManyWithoutUserInput
  files: FileUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput!
  create: UserCreateWithoutFilesInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutMeetingsInput {
  update: UserUpdateWithoutMeetingsDataInput!
  create: UserCreateWithoutMeetingsInput!
}

input UserUpsertWithoutParticipantsInput {
  update: UserUpdateWithoutParticipantsDataInput!
  create: UserCreateWithoutParticipantsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutReservationsInput {
  update: UserUpdateWithoutReservationsDataInput!
  create: UserCreateWithoutReservationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  birthday: String
  birthday_not: String
  birthday_in: [String!]
  birthday_not_in: [String!]
  birthday_lt: String
  birthday_lte: String
  birthday_gt: String
  birthday_gte: String
  birthday_contains: String
  birthday_not_contains: String
  birthday_starts_with: String
  birthday_not_starts_with: String
  birthday_ends_with: String
  birthday_not_ends_with: String
  phoneNum: String
  phoneNum_not: String
  phoneNum_in: [String!]
  phoneNum_not_in: [String!]
  phoneNum_lt: String
  phoneNum_lte: String
  phoneNum_gt: String
  phoneNum_gte: String
  phoneNum_contains: String
  phoneNum_not_contains: String
  phoneNum_starts_with: String
  phoneNum_not_starts_with: String
  phoneNum_ends_with: String
  phoneNum_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  introduce: String
  introduce_not: String
  introduce_in: [String!]
  introduce_not_in: [String!]
  introduce_lt: String
  introduce_lte: String
  introduce_gt: String
  introduce_gte: String
  introduce_contains: String
  introduce_not_contains: String
  introduce_starts_with: String
  introduce_not_starts_with: String
  introduce_ends_with: String
  introduce_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  classes: Int
  classes_not: Int
  classes_in: [Int!]
  classes_not_in: [Int!]
  classes_lt: Int
  classes_lte: Int
  classes_gt: Int
  classes_gte: Int
  meetings_every: MeetingWhereInput
  meetings_some: MeetingWhereInput
  meetings_none: MeetingWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  participants_every: ParticipantWhereInput
  participants_some: ParticipantWhereInput
  participants_none: ParticipantWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phoneNum: String
  email: String
}

type View {
  id: ID!
  user: User
  post: Post!
  createdAt: DateTime!
}

type ViewConnection {
  pageInfo: PageInfo!
  edges: [ViewEdge]!
  aggregate: AggregateView!
}

input ViewCreateInput {
  id: ID
  user: UserCreateOneInput
  post: PostCreateOneWithoutViewsInput!
}

input ViewCreateManyWithoutPostInput {
  create: [ViewCreateWithoutPostInput!]
  connect: [ViewWhereUniqueInput!]
}

input ViewCreateWithoutPostInput {
  id: ID
  user: UserCreateOneInput
}

type ViewEdge {
  node: View!
  cursor: String!
}

enum ViewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type ViewPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input ViewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ViewScalarWhereInput!]
  OR: [ViewScalarWhereInput!]
  NOT: [ViewScalarWhereInput!]
}

type ViewSubscriptionPayload {
  mutation: MutationType!
  node: View
  updatedFields: [String!]
  previousValues: ViewPreviousValues
}

input ViewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewWhereInput
  AND: [ViewSubscriptionWhereInput!]
  OR: [ViewSubscriptionWhereInput!]
  NOT: [ViewSubscriptionWhereInput!]
}

input ViewUpdateInput {
  user: UserUpdateOneInput
  post: PostUpdateOneRequiredWithoutViewsInput
}

input ViewUpdateManyWithoutPostInput {
  create: [ViewCreateWithoutPostInput!]
  delete: [ViewWhereUniqueInput!]
  connect: [ViewWhereUniqueInput!]
  set: [ViewWhereUniqueInput!]
  disconnect: [ViewWhereUniqueInput!]
  update: [ViewUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [ViewUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [ViewScalarWhereInput!]
}

input ViewUpdateWithoutPostDataInput {
  user: UserUpdateOneInput
}

input ViewUpdateWithWhereUniqueWithoutPostInput {
  where: ViewWhereUniqueInput!
  data: ViewUpdateWithoutPostDataInput!
}

input ViewUpsertWithWhereUniqueWithoutPostInput {
  where: ViewWhereUniqueInput!
  update: ViewUpdateWithoutPostDataInput!
  create: ViewCreateWithoutPostInput!
}

input ViewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ViewWhereInput!]
  OR: [ViewWhereInput!]
  NOT: [ViewWhereInput!]
}

input ViewWhereUniqueInput {
  id: ID
}
`
      }
    